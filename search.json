[{"path":"https://duncanobrien.github.io/EWSmethods/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 EWSmethods authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Duncan O'Brien. Maintainer.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"O'Brien D., Deb S. & Clements C.F (2022). EWSmethods: Pretty assessment univariate multivariate early warning signals. R package version 0.1.0 https://github.com/duncanobrien/EWSmethods.","code":"@Manual{,   title = {{EWSmethods}: Pretty assessment of univariate and multivariate early warning signals},   author = {Duncan A. O'Brien and Smita Deb and Christopher F Clements},   note = {R package version 0.1.0},   year = {2022},   url = {https://github.com/duncanobrien/EWSmethods},   doi = {10.5281/zenodo.6620844}, }"},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"ewsmethods","dir":"","previous_headings":"","what":"Simple Early Warning Signals for Univariate and Multivariate Time Series","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"EWSmethods user friendly interface various methods performing Early Warning Signal (EWS) assessments. R package allows user input univariate multivariate data perform either traditional rolling window (e.g. Dakos et al. 2012) expanding window (Drake Griffin, 2010) EWS approaches. Publication standard ggplot inspired figures can also generated process. EWSmethods also provides R interface EWSNET, deep learning modelling framework predicting critical transitions (Deb et al. 2022).","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"can install development version EWSmethods GitHub :","code":"# install.packages(\"devtools\") # devtools::install_github(\"duncanobrien/EWSmethods\")"},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"Imagine 50 years monitoring data local population skylarks (Alauda arvensis) measured mean body mass data throughout period well. calculate either rolling expanding window EWSs using abundance data via univariate_EWS_wrapper() decide initially focus rolling windows. therefore parameterise function : can use resulting figures identify oncoming transitions. case, expect transition data randomly sampled normal distribution evident Kendall Tau values, strong positive correlation time:  Alternatively, may interested expanding windows approach standardises changing EWS metrics time therefore allows strength multiple signals combined. achieve using following code: , can use resulting figures identify oncoming transitions. Whilst trangressions 2σ threshold, consider signals “warnings” two consecutive signals identified (Clements et al. 2019).  second benefit expanding window approach additional information can used improve reliability assessment. Including trait information shown decrease likelihood false positive false negative signals (Clements Ozgul, 2016; Baruah et al. 2019) therefore considered possible. example, hypothetical skylark dataset, measured average population body mass. data can delivered univariate_EWS_wrapper() function EWSmethods, using trait argument.","code":"library(EWSmethods) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo set.seed(125) #seed to ensure reproducible results  skylark_data <- data.frame(time = seq(1:50), abundance = rnorm(50,mean = 100,sd=20), trait = rnorm(50,mean=40,sd=5)) #dummy skylark dataset  ews_metrics <- c(\"SD\",\"ar1\",\"skew\") #the early warning signal metrics we wish to compute  roll_ews <- uniEWS(data = skylark_data[,1:2], metrics =  ews_metrics, method = \"rolling\", winsize = 50, ggplotIt =TRUE,  y_lab = \"Skylark abundance\") #lets use a rolling window approach  roll_ews$EWS$cor #return the Kendall Tau correlations for each EWS metric #>            SD        ar1       skew #> tau 0.5446154 -0.3907692 -0.7046154 exp_ews <- uniEWS(data = skylark_data[,1:2], metrics =  ews_metrics, method = \"expanding\", burn_in = 10, threshold = 2,  tail.direction = \"one.tailed\", ggplotIt =TRUE, y_lab = \"Skylark abundance\") #lets use a rolling window approach #> Warning: Removed 7 row(s) containing missing values (geom_path). #> Warning: Removed 7 rows containing missing values (geom_point).  head(exp_ews$EWS) #return the head of the EWS dataframe #>   time metric.score metric.code rolling.mean rolling.sd threshold.crossed #> 1   10    0.0000000         ar1    0.0000000         NA                 0 #> 2   11   -0.7071068         ar1   -0.3535534  0.5000000                 0 #> 3   12   -0.9223669         ar1   -0.5431579  0.4825449                 0 #> 4   13   -0.1500572         ar1   -0.4448827  0.4403012                 0 #> 5   14    0.8428688         ar1   -0.1873324  0.6906950                 0 #> 6   15   -1.8668306         ar1   -0.4672488  0.9229121                 0 #>   count.used        str #> 1  108.91249         NA #> 2   93.56813 -0.7071068 #> 3  109.56960 -0.7858522 #> 4  103.92341  0.6695997 #> 5  114.29655  1.4915428 #> 6   80.79726 -1.5164845 trait_metrics <- c(\"SD\", \"ar1\", \"trait\") exp_ews_trait <- uniEWS(data = skylark_data[,1:2], metrics =  trait_metrics, method = \"expanding\", burn_in = 10, threshold = 2, tail.direction = \"one.tailed\", ggplotIt =TRUE, y_lab = \"Skylark abundance\", trait = skylark_data$trait, trait_lab = \"Body mass (g)\", trait_scale = 5) #> Warning: Removed 7 row(s) containing missing values (geom_path). #> Warning: Removed 7 rows containing missing values (geom_point)."},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"multivariate-early-warning-signals","dir":"","previous_headings":"Examples","what":"Multivariate Early Warning Signals","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"data multiple timeseries/measurements system, might interested multivariate early warning signals. indicators exploit either dimension reduction techniques (Principal Component Analysis) community average estimates give overall measure system resilience (see Weinans et al. 2021 overview indicator). ’ve constructed another hypothetical dataset representing five related populations Caribbean reef octopus (Octopus briareus) Bahamian salt water lakes (O’Brien et al. 2020) interested assessing resilience metapopulation. following code shows achieve using EWSmethods function multivariate_EWS_wrapper(). figure shows one multivariate EWS indicator expressed warning, overall, transition anticipated.","code":"set.seed(123)  octopus_spp_data <- matrix(nrow = 50, ncol = 5) octopus_spp_data <- as.data.frame(cbind(\"time\"=seq(1:50),sapply(1:dim(octopus_spp_data)[2], function(x){octopus_spp_data[,x] <- rnorm(50,mean=500,sd=200)}))) #create our hypothetical, uncollapsing ecosystem  oct_exp_ews <- multiEWS(data = octopus_spp_data, method = \"expanding\", threshold = 2, tail.direction = \"one.tailed\", ggplotIt = TRUE) #lets use an expanding window approach #> Warning: Removed 22 row(s) containing missing values (geom_path). #> Warning: Removed 22 rows containing missing values (geom_point)."},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"ewsnet","dir":"","previous_headings":"","what":"EWSNet","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"half EWSmethods allows query Python-based EWSNet via easy use R workflow. simple example details first prepare R session communicate Python (using excellent reticulate R package) calls EWSNet assess probability transition occurring skylark time series. two step process must ) call ewsnet_init() b) using ewsnet_predict().","code":"bypass_reticulate_autoinit() #edits your global R environment with the line: RETICULATE_AUTOCONFIGURE = \"FALSE\". This ensures 'reticulate' does not load a python environment until 'ewsnet_init()' has been called #> RETICULATE_AUTOCONFIGURE already set to FALSE  library(reticulate)  ewsnet_init(envname = \"EWSNET_env\") #prepares your workspace using 'reticulate' and asks to install Anaconda (if no appropriate Python found) and/or a Python environment before activating that environment with the necessary Python packages #> conda env EWSNET_env found. Would you like to activate it and install necessary #> packages? (y/n) #> Aborting  reticulate::use_condaenv(\"EWSNET_env\") #redundant step necessary for RMarkdown  print(reticulate::py_config()) #confirm that \"EWSNET_env\" has been loaded #> python:         /Users/ul20791/Library/r-miniconda-arm64/envs/EWSNET_env/bin/python #> libpython:      /Users/ul20791/Library/r-miniconda-arm64/envs/EWSNET_env/lib/libpython3.8.dylib #> pythonhome:     /Users/ul20791/Library/r-miniconda-arm64/envs/EWSNET_env:/Users/ul20791/Library/r-miniconda-arm64/envs/EWSNET_env #> version:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 06:05:16)  [Clang 12.0.1 ] #> numpy:          /Users/ul20791/Library/r-miniconda-arm64/envs/EWSNET_env/lib/python3.8/site-packages/numpy #> numpy_version:  1.23.1 #>  #> NOTE: Python version was forced by use_python function  py_packages <- reticulate::py_list_packages() #list all packages currently loaded in to \"EWSNET_env\" head(py_packages) #>           package   version               requirement     channel #> 1         absl-py     1.1.0             absl-py=1.1.0        pypi #> 2       alabaster    0.7.12          alabaster=0.7.12        pypi #> 3      astunparse     1.6.3          astunparse=1.6.3        pypi #> 4           babel    2.10.3              babel=2.10.3        pypi #> 5           bzip2     1.0.8               bzip2=1.0.8 conda-forge #> 6 ca-certificates 2022.6.15 ca-certificates=2022.6.15 conda-forge  skylark_ewsnet <- ewsnet_predict(skylark_data$abundance, noise_type = \"W\", ensemble = 25, envname = \"EWSNET_env\") #perform EWSNet assessment using white noise and all 25 models. The envname should match ewsnet_init()  print(skylark_ewsnet) #>                  pred no_trans_prob smooth_trans_prob critical_trans_prob #> 1 Critical Transition  0.0001411155         0.2852249           0.7146339"},{"path":"https://duncanobrien.github.io/EWSmethods/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simple Early Warning Signals for Univariate and Multivariate Time Series","text":"Baruah, G., Clements, C.F., Guillaume, F. & Ozgul, . (2019) shifts trait dynamics precede population declines? American Naturalist, 193, 633–644. doi:10.1086/702849 Clements, C.F. & Ozgul, . (2016) Including trait-based early warning signals helps predict population collapse. Nature Communications, 7, 10984. doi:10.1038/ncomms10984 Clements, C.F., McCarthy, M.. & Blanchard, J.L. (2019) Early warning signals recovery complex systems. Nature Communications, 10, 1681. doi:10.1038/s41467-019-09684-y Dakos V., Carpenter S.R., Brock W.., Ellison .M., Guttal V., et al. (2012) Methods detecting early warnings critical transitions time series illustrated using simulated ecological data. PLOS ONE, 7, 7:e41010. doi:10.1371/journal.pone.0041010 Deb S., Sidheekh S., Clements C.F., Krishnan N.C. & Dutta P.S. (2022) Machine learning methods trained simple models can predict critical transitions complex natural systems. Royal Society Open Science, 9, 211475. doi:10.1098/rsos.211475 Drake, J. & Griffen, B. (2010) Early warning signals extinction deteriorating environments. Nature, 467, 456–459. doi:10.1038/nature09389 O’Brien, D.., Taylor, M.L., Masonjones, H.D., Boersch-Supan P.H. & O’Shea, O.R. (2020) Drivers octopus abundance density anchialine lake: 30 year comparison. Journal Experimental Marine Biology Ecology, 528, 151377. doi:10.1016/j.jembe.2020.151377 Weinans, E., Quax, R., van Nes, E.H. & van de Leemput, .. (2021) Evaluating performance multivariate indicators resilience loss. Scientific Reports, 11, 9148. 10.1038/s41598-021-87839-y","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/EWSNET_init.html","id":null,"dir":"Reference","previous_headings":"","what":"EWSNet Initialisation — ewsnet_init","title":"EWSNet Initialisation — ewsnet_init","text":"Prepares R session communicating Python. function first searches computer appropriate Python environment activates , importing vital Python packages required. appropriate Python install environment found, asking permission, miniconda downloaded environment created.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/EWSNET_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EWSNet Initialisation — ewsnet_init","text":"","code":"ewsnet_init(envname, pip_ignore_installed = FALSE, conda_refresh = F)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/EWSNET_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EWSNet Initialisation — ewsnet_init","text":"envname string naming desired Python environment create/activate. Python environment found, functions prompts install miniconda required python packages. pip_ignore_installed Boolean. FALSE, packages already installed loaded re-downloaded. However, TRUE, packages downloaded irregardless, overwriting version already present (analagous updating required). conda_refresh Boolean. TRUE, miniconda uninstalled gives user opportunity perform fresh reinstall.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/EWSNET_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EWSNet Initialisation — ewsnet_init","text":"return object simply preparing R session.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/EWSNET_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EWSNet Initialisation — ewsnet_init","text":"","code":"if (FALSE) bypass_autoinit() #this function prevents 'reticulate' automatically #reloading the python environment from the #previous session. Only needs to be run once #on first install of 'EWSmethods'.  if (FALSE) ewsnet_init(envname = \"EWSNET_env\") #Common errors at this stage result from 'reticulate's #behaviour. For example, conflicts between 'ewsnet_init' #and RETICULATE_PYTHON may occur if run inside a #RStudio R project. To fix this, navigate to #Preferences -> Python, untick 'Automatically #activate project-local Python environments' #and restart R.  if (FALSE) reticulate::py_config() #If successful, 'EWSNET_env forced by use_python #function' will be printed."},{"path":"https://duncanobrien.github.io/EWSmethods/reference/FI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Fisher Information — FI","title":"Calculate Fisher Information — FI","text":"Uses multivariate array time series estimate Fisher information following approach Karunanithi et al. (2010).","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/FI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Fisher Information — FI","text":"","code":"FI(timedat, data, sost, winsize, winspace = 1, TL = 90)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/FI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Fisher Information — FI","text":"timedat numeric vector equal spacing representing time points data numeric matrix individual time series across columns. different species, populations measurements. sost 1 x n matrix n length equal number time series data. value 'size state' tolerable time series typically represented standard deviation time series reference period. winsize Numeric value. Defines window size rolling window percentage time series length. winspace Numeric value. number data points roll window iteration. Must less winsize. TL Numeric value. 'tightening level' percentage points shared states allows algorithm classify data points state.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/FI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Fisher Information — FI","text":"list containing three objects: FI numeric vector Fisher information estimates midt_win numeric vector time index centre window associated value FI. t_win n x m numeric matrix length n winspace length m number window shifts made. Values consequently timepoint indices contribute window.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/NFisherpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Information Binning — NFisherpdf","title":"Fisher Information Binning — NFisherpdf","text":"purpose program bin points states calculating difference (dist) variable vector per timestep counting variable vector dist<= size state percentage variables vector meets criteria tightening level.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/NFisherpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Information Binning — NFisherpdf","text":"","code":"NFisherpdf(data, lmin, lmax, sizeofstates, TL)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/NFisherpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Information Binning — NFisherpdf","text":"data numeric matrix individual time series across columns. different species, populations measurements. lmin Numeric value. Index lower limit window. lmax Numeric value. Index upper limit window. sizeofstates 1 x n matrix n length equal number time series data. value 'size state' tolerable time series typically represented standard deviation time series reference period. TL Numeric value. 'tightening level' percentage points shared states allows algorithm classify data points state.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/NFisherpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Information Binning — NFisherpdf","text":"list NewList containing two objects: pdf uniform probability density function. neighbour time point indices contribute calculation.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/W_composite_ews.html","id":null,"dir":"Reference","previous_headings":"","what":"Expanding Window Early Warning Signals — W_composite_ews","title":"Expanding Window Early Warning Signals — W_composite_ews","text":"Modified code Clements, McCarthy, Blanchard (2019) Nature Coms - \"Early warning signals rocovery complex systems\". Additional EWS indicators, burn_in interpolation capability added","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/W_composite_ews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expanding Window Early Warning Signals — W_composite_ews","text":"","code":"W_composite_ews(   dat,   indicators,   weights,   trait = NULL,   threshold = 2,   burn_in = 5,   tail.direction = \"one.tailed\",   interpolate = F )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/W_composite_ews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expanding Window Early Warning Signals — W_composite_ews","text":"dat n x m dataframe first column  time indices second column abundances. indicators string vector early warning signal indicators interest. Options include: \"ar1\", \"cv\", \"SD\", \"acf\",\"rr\",\"dr\",\"skew\",\"kurt\",\"mean.size\",\"sd.size\",\"sd.95\",\"trait\". weights two column dataframe weights indicator. First column indicators second weights. trait Boolean. true, \"trait\" provided indicator. threshold Numeric. threshold*sigma cutoff past warning identified. burn_in Numeric. Number data points used train signals early warning signal assessment performed. tail.direction string match \"one.tailed\" \"two.tailed\". interpolate Boolean. missing values dat interpolated.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/W_composite_ews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expanding Window Early Warning Signals — W_composite_ews","text":"output matrix early warning signal indicators time.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/bypass_reticulate_autoinit.html","id":null,"dir":"Reference","previous_headings":"","what":"Prevent Reticulate Autoconfiguring Python environments — bypass_reticulate_autoinit","title":"Prevent Reticulate Autoconfiguring Python environments — bypass_reticulate_autoinit","text":"Adds RETICULATE_AUTOCONFIGURE = \"FALSE\" .Renviron prevent reticulate automatically loading Python environments.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/bypass_reticulate_autoinit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prevent Reticulate Autoconfiguring Python environments — bypass_reticulate_autoinit","text":"","code":"bypass_reticulate_autoinit()"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/deseason_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Deseason Seasonal Time Series — deseason_ts","title":"Deseason Seasonal Time Series — deseason_ts","text":"Removes seasonal signals time series using either averaging time series decomposition methods. Three decomposition methods available: traditional decompostion, loess decomposition X11 decompostion.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/deseason_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deseason Seasonal Time Series — deseason_ts","text":"","code":"deseason_ts(   data,   increment = c(\"month\", \"year\", \"week\", \"day\"),   method = c(\"average\", \"decompose\", \"stl\", \"x11\"),   order = NULL )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/deseason_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deseason Seasonal Time Series — deseason_ts","text":"data dataframe transformed, first column must vector dates columns individual time series. increment time-step increment either month, year, week, day. Provides basis deaseasoning. method String either \"average\", \"decompose\", \"stl\" \"x11\" indicating method deseasoning. \"average\" subtracts average representative month/week/day---year time point whereas \"decompose\", \"stl\" \"x11\" subtracts seasonal component estimated time series decomposition, loess decomposition X11 method respectively. order String indicating date format date columns. Options \"dmy\", \"ymd\" \"mdy\".","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/deseason_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deseason Seasonal Time Series — deseason_ts","text":"Dataframe deseasoned time series.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/deseason_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deseason Seasonal Time Series — deseason_ts","text":"","code":"#Generate five random monthly time series #of 5 years length.  spp_data <- matrix(nrow = 5*12, ncol = 5) spp_data <- sapply(1:dim(spp_data)[2], function(x){ spp_data[,x] <- rnorm(5*12,mean=20,sd=5)}) multi_spp_data <- cbind(\"time\" =  seq(as.Date('2000/01/01'), as.Date('2004/12/01'), by=\"month\"),    as.data.frame(spp_data))  #Deseason using time series #decomposition.  decomp_dat <- deseason_ts(data = multi_spp_data, increment = \"month\", method = \"decompose\", order = \"ymd\") #> data successfully aggregated into monthly time steps  #Deseason using loess  decomp_dat <- deseason_ts(data = multi_spp_data, increment = \"month\", method = \"stl\", order = \"ymd\") #> data successfully aggregated into monthly time steps"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_finetune.html","id":null,"dir":"Reference","previous_headings":"","what":"EWSNet Finetune — ewsnet_finetune","title":"EWSNet Finetune — ewsnet_finetune","text":"Communicates EWSNet (https://ewsnet.github.io), deep learning framework modelling anticipating regime shifts dynamical systems, finetunes model match inputted training data. overwrites Pretrained weights bundled EWSmethods. See reset_ewsnet() reset trained weights.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_finetune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EWSNet Finetune — ewsnet_finetune","text":"","code":"ewsnet_finetune(x, y, noise_type = \"W\", ensemble = 25, envname)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_finetune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EWSNet Finetune — ewsnet_finetune","text":"x numeric matrix finetune EWSNet . column represents separate timeseries row timestep. y numeric vector consisting target labels training time series. Labels include: 0 (transition), 1 (smooth transition) 2 (critical transition). noise_type string stating form noise use. Options \"W\" (white noise) \"C\" (coloured noise). ensemble numeric value stating number models average . Options range 1 25. envname string naming Python environment prepared ewsnet_init().","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_finetune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EWSNet Finetune — ewsnet_finetune","text":"","code":"#Activate python environment (only necessary #on first opening of R session).  if (FALSE) ewsnet_init(envname = \"EWSNET_env\")  #A dummy dataset of a hedgerow bird population #monitored over 50 years that needs to be tuned.  abundance_data <- data.frame(time = seq(1:50),  abundance = rnorm(50,mean = 20))  #Generate training data (this is random data as #an example).  x <- matrix(nrow = 50, ncol = 10) x <- sapply(1:dim(x)[2], function(i){  x[,i] <- rnorm(50,mean=20,sd=10)})  #Label each time series. y <- sample(0:2,10,replace = TRUE)  #Finetune EWSNet.  if (FALSE) ewsnet_finetune(  x = x,  y = y,  noise_type = \"W\",  ensemble = 25,  envname = \"EWSNET_env\")  #Generate new EWSNet predictions.  if (FALSE) pred <- ewsnet_predict(  abundance_data$abundance,  noise_type = \"W\",  ensemble = 15,  envname = \"EWSNET_env\")"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"EWSNet Predict — ewsnet_predict","title":"EWSNet Predict — ewsnet_predict","text":"Communicates EWSNet (https://ewsnet.github.io), deep learning framework modelling anticipating regime shifts dynamical systems, returns model's prediction inputted univariate time series.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EWSNet Predict — ewsnet_predict","text":"","code":"ewsnet_predict(x, noise_type = \"W\", ensemble = 25, envname)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EWSNet Predict — ewsnet_predict","text":"x numeric vector values tested. noise_type string stating form noise use. Options \"W\" (white noise) \"C\" (coloured noise). ensemble numeric value stating number models average . Options range 1 25. envname string naming Python environment prepared ewsnet_init().","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EWSNet Predict — ewsnet_predict","text":"dataframe EWSNet predictions. Values represent estimated probability quoted event occur.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/ewsnet_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EWSNet Predict — ewsnet_predict","text":"","code":"#A dummy dataset of a hedgerow bird population #monitored over 50 years.  abundance_data <- data.frame(time = seq(1:50),  abundance = rnorm(50,mean = 20))  #Activate python environment (only necessary #on first opening of R session).  if (FALSE) ewsnet_init(envname = \"EWSNET_env\")  #Generate EWSNet predictions.  if (FALSE) pred <- ewsnet_predict(  abundance_data$abundance,  noise_type = \"W\",  ensemble = 15,  envname = \"EWSNET_env\")"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/maf.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum/Minimum Autocorrelation Factors — maf","title":"Maximum/Minimum Autocorrelation Factors — maf","text":"Maximum/Minimum Autocorrelation Factors","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum/Minimum Autocorrelation Factors — maf","text":"","code":"maf(x)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum/Minimum Autocorrelation Factors — maf","text":"x dataframe n x m dataframe species (columns) abundances time (rows)","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum/Minimum Autocorrelation Factors — maf","text":"list containing input data, dimension reduction time series, rotations, autocorrelation eigenvalues","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/multiEWS.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Early Warning Signal Assessment — multiEWS","title":"Multivariate Early Warning Signal Assessment — multiEWS","text":"single function performing early warning signal (EWS) assessment multivariate systems multiple time series measured. methods EWS assessment can performed (rolling expanding windows) assessments returned dataframe without standardised ggplot-based figure. two methods dimension reduction used perform assessments Principal Component Analysis Maximum/Minimum Autocorrelation Factors.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/multiEWS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Early Warning Signal Assessment — multiEWS","text":"","code":"multiEWS(   data,   method = c(\"expanding\", \"rolling\"),   ggplotIt = TRUE,   winsize = 50,   burn_in = 5,   threshold = 2,   tail.direction = \"one.tailed\" )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/multiEWS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Early Warning Signal Assessment — multiEWS","text":"data dataframe first column equally spaced time vector columns individual time series. different species, populations measurements. method Single string either \"expanding\" \"rolling\". \"expanding\" calls composite, expanding window EWS assessment. \"rolling\" calls typical, rolling window EWS assessment. ggplotIt Boolean. TRUE, returns ggplot plot EWS strength trends estimated dimension reduction. winsize Numeric value. method = \"rolling\", defines window size rolling window percentage time series' length. burn_in Numeric value. method = \"expanding\", defines number data points 'train' signals prior EWS assessment. threshold Numeric value either 1 2. Threshold*sigma value , EWS strength exceeds , constitutes \"signal\". tail.direction String either \"one.tailed\" \"two.tailed\". \"one.tailed\" indicates warning positive threshold sigma exceeded. \"two.tailed\" indicates warning positive negative threshold*sigma exceeded.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/multiEWS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Early Warning Signal Assessment — multiEWS","text":"list containing two objects: EWS outputs time (EWS), plot object (plot) ggplotIt = TRUE. EWS$raw Dataframe EWS measurements time. method = \"expanding\", metric rbound single dataframe extra columns provided indicating whether threshold*sigma value exceeded (.e. \"threshold.crossed\"). method = \"expanding\", metric's evolution time returned individual columns. EWS$dimred.ts Dataframe containing dimension reduction time series EWS$cor Dataframe Kendall Tau correlations. returned method = \"rolling\". plot Plot object. returned ggplotIt = \"TRUE\".","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/multiEWS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Early Warning Signal Assessment — multiEWS","text":"","code":"#Generate a random five species, non-transitioning #ecosystem with 50 years of monitoring data.  spp_data <- matrix(nrow = 50, ncol = 5) spp_data <- sapply(1:dim(spp_data)[2], function(x){  spp_data[,x] <- rnorm(50,mean=20,sd=5)})  multi_spp_data <- as.data.frame(cbind(\"time\" =  seq(1:50), spp_data))  #Rolling window early warning signal assessment of #the ecosystem, without plotting.  roll_ews <- multiEWS(  data = multi_spp_data,  method = \"rolling\",  winsize = 50,  ggplotIt =FALSE)  #Expanding window early warning signal assessment of #the ecosystem, with plotting.  if (FALSE) exp_ews <- multiEWS(  data = multi_spp_data,  method = \"expanding\",  burn_in = 10,  ggplotIt =TRUE)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/mvi.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Variance Index function — mvi","title":"Multivariate Variance Index function — mvi","text":"Calculate multivariate variance following Brock, W. ., S. R. Carpenter. 2006. Variance leading indicator regime shift ecosystem services. Ecology Society 11(2): 9.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/mvi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Variance Index function — mvi","text":"","code":"mvi(df, winsize)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/mvi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Variance Index function — mvi","text":"df numeric matrix species abundances, names across columns, time across rows winsize Numeric. Defines window size rolling window percentage time series length.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/mvi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Variance Index function — mvi","text":"matrix first column last time index window second column estimated index value.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/no.plot.ews.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling Window Early Warning Signals\nAn adaptation of the generic_ews function in the R package earlywarnings. — no.plot.ews","title":"Rolling Window Early Warning Signals\nAn adaptation of the generic_ews function in the R package earlywarnings. — no.plot.ews","text":"Rolling Window Early Warning Signals adaptation generic_ews function R package earlywarnings.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/no.plot.ews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling Window Early Warning Signals\nAn adaptation of the generic_ews function in the R package earlywarnings. — no.plot.ews","text":"","code":"no.plot.ews(   timeseries,   winsize = 50,   detrending = c(\"no\", \"gaussian\", \"loess\", \"linear\", \"first-diff\"),   bandwidth = NULL,   span = NULL,   degree = NULL,   logtransform = FALSE,   interpolate = FALSE,   AR_n = FALSE,   powerspectrum = FALSE )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/no.plot.ews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling Window Early Warning Signals\nAn adaptation of the generic_ews function in the R package earlywarnings. — no.plot.ews","text":"timeseries dataframe first column time (equally spaced) second column abundance. winsize Numeric. Defines window size rolling window percentage timeseries. detrending string. detrending performed time series. bandwidth Numeric. Bandwidth used Gaussian kernel gaussian filtering applied. expressed percentage time series length. span Numeric. Parameter controls degree smoothing (numeric 0 100, Default 25). degree Numeric. degree polynomial loess detrending applied. logtransform Boolean. TRUE, data log transformed log(x+1). interpolate Boolean. TRUE, interpolates missing values found within abundance time series. AR_n Boolean. TRUE, best fitted AR(n) model fitted data. powerspectrum Boolean. TRUE power spectrum within rolling window.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/reset_ewsnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset EWSNet Model Weights — reset_ewsnet","title":"Reset EWSNet Model Weights — reset_ewsnet","text":"Restores EWSNet model weights pretrained defaults published https://ewsnet.github.io. may necessary finetuning reset model. Follow link (https://github.com/sahilsid/ewsnet) find original weights extract zip file suitable location use new_weight_location.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/reset_ewsnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset EWSNet Model Weights — reset_ewsnet","text":"","code":"reset_ewsnet(new_weight_location)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/reset_ewsnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset EWSNet Model Weights — reset_ewsnet","text":"new_weight_location path string location unzipped file saved. Include \"Pretrained\" final path folder.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/reset_ewsnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset EWSNet Model Weights — reset_ewsnet","text":"","code":"if (FALSE) reset_ewsnet(new_weight_location = \"C:/Users/your_name/Downloads/Pretrained\") # Windows example if (FALSE) reset_ewsnet(new_weight_location = \"/Users/your_name/Downloads/Pretrained\") # Mac example"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/uniEWS.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Early Warning Signal Assessment — uniEWS","title":"Univariate Early Warning Signal Assessment — uniEWS","text":"function performing early warning signal (EWS) assessment univariate time series. rolling expanding window methods EWS assessment can performed assessments returned dataframe without standardised ggplot-based figure.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/uniEWS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Early Warning Signal Assessment — uniEWS","text":"","code":"uniEWS(   data,   metrics,   method = c(\"expanding\", \"rolling\"),   ggplotIt = TRUE,   y_lab = \"Generic indicator name\",   winsize = 50,   burn_in = 5,   threshold = 2,   tail.direction = \"one.tailed\",   trait = NULL,   trait_lab = \"Generic Trait Name\",   trait_scale = 1000 )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/uniEWS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Early Warning Signal Assessment — uniEWS","text":"data dataframe first column equally spaced time vector second column time series assessed. metrics String vector early warning signal metrics assessed.  Options include: \"ar1\", \"cv\", \"SD\", \"acf\", \"rr\", \"dr\", \"skew\", \"kurt\", \"mean.size\", \"sd.size\", \"sd.95\" \"trait\". method Single string either \"expanding\" \"rolling\". \"expanding\" calls composite, expanding window EWS assessment. \"rolling\" calls typical, rolling window EWS assessment. ggplotIt Boolean. TRUE, returns ggplot plot EWS strength trends input abundance. y_lab String label. ggplotIt = TRUE, labels abundance y axis. winsize Numeric value. method = \"rolling\", defines window size rolling window percentage time series length. burn_in Numeric value. method = \"expanding\", defines number data points 'train' signals prior EWS assessment. threshold Numeric value either 1 2. Threshold*sigma value , EWS strength exceeds , constitutes \"signal\". tail.direction String either \"one.tailed\" \"two.tailed\". \"one.tailed\" indicates warning positive threshold sigma exceeded. \"two.tailed\" indicates warning positive negative threshold*sigma exceeded. trait vector numeric trait values desired. Can NULL trait_lab String label. ggplotIt = TRUE, & trait populated, & \"trait\" supplied metrics, labels right side y axis represents trait values time. trait_scale Numeric value. Scales trait y axis relative abundance y axis.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/uniEWS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Early Warning Signal Assessment — uniEWS","text":"list containing two objects: EWS outputs time (EWS), plot object (plot) ggplotIt = TRUE. EWS$raw Dataframe EWS measurements time. method = \"expanding\", metric rbound single dataframe extra columns provided indicating whether threshold*sigma value exceeded (.e. \"threshold.crossed\"). method = \"expanding\", metric's evolution time returned individual columns. EWS$cor Dataframe Kendall Tau correlations. returned method = \"rolling\". plot Plot object. returned ggplotIt = \"TRUE\".","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/uniEWS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate Early Warning Signal Assessment — uniEWS","text":"","code":"#A dummy dataset of a hedgerow bird population over #50 years where both the number of individuals and #the average bill length has been measured.  abundance_data <- data.frame(time = seq(1:50),  abundance = rnorm(50,mean = 20),  trait = rnorm(50,mean=1,sd=0.5))  #The early warning signal metrics to compute.  ews_metrics <- c(\"SD\",\"ar1\",\"skew\")  #Rolling window early warning signal assessment of #the bird abundance (no plotting).  roll_ews <- uniEWS(  data = abundance_data[,1:2],  metrics =  ews_metrics,  ggplotIt = FALSE,  method = \"rolling\",  winsize = 50)  #Expanding window early warning signal assessment of #the bird abundance (with plotting).  if (FALSE) exp_ews <- uniEWS(  data = abundance_data,  metrics = ews_metrics,  method = \"expanding\",  burn_in = 10,  ggplotIt = TRUE,  y_lab = \"Bird abundance\")  #Expanding window early warning signal assessment of #the bird abundance incorporating the trait #information (with plotting).  ews_metrics_trait <- c(\"SD\",\"ar1\",\"trait\") if (FALSE) trait_exp_ews <- uniEWS(  data = abundance_data,  metrics = ews_metrics_trait,  method = \"expanding\",  burn_in = 10,  ggplotIt = TRUE,  trait = abundance_data$trait,  trait_lab = \"Bill length (mm)\",  trait_scale = 10)"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/wMAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Early Warning Signals — wMAF","title":"Multivariate Early Warning Signals — wMAF","text":"Multivariate Early Warning Signals","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/wMAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Early Warning Signals — wMAF","text":"","code":"wMAF(   data,   method = c(\"rolling\", \"expanding\"),   winsize,   burn_in = 5,   tail.direction = \"one.tailed\",   threshold = 2 )"},{"path":"https://duncanobrien.github.io/EWSmethods/reference/wMAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Early Warning Signals — wMAF","text":"data n x m dataframe first column time indices remainder columns species abundances. method single string stating either \"expanding\" \"rolling\".\"expanding\" calls composite, expanding window EWS assessment. \"rolling\" calls typical, rolling window EWS assessment. winsize Numeric. \"method\" = \"rolling\", defines window size rolling window percentage time series length. burn_in Numeric. \"method\" = \"expanding\", defines number data points 'train' signals prior EWS assessment. tail.direction string. \"method\" = \"expanding\", positive negative thresholds considered. threshold Numeric. \"method\" = \"expanding\", defines threshold*sigma warning threshold.","code":""},{"path":"https://duncanobrien.github.io/EWSmethods/reference/wMAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Early Warning Signals — wMAF","text":"list containing \"raw\" (early warning signals time) \"dimred.ts\" (dimension reduction time series)","code":""}]
